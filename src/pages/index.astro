---
// Import layouts
import BaseLayout from "../layouts/BaseLayout.astro";

// Import components
import Hero from "@components/Hero.astro";
import Seasons from "@components/seasons/Seasons.svelte";

// Import data functions
import { getSeasonStats } from "@data/stats";
import { getSeasonRelat } from "@data/relats";
import { getSeasonsCount } from "@data/seasonsCount";
import { getSeasonSocial } from "@data/social";
import { SEASONS_LAYOUT } from "@data/globalConstants";
import { getJugadorsImagesListNames } from "@data/images.js";

// Import util functions
import { removeAccents } from "../utils/helperFunctions";

// Function to capitalize words in a string
function capitalizeWords(str: string) {
  const lowerStr = str.toLowerCase();
  const words = lowerStr.split(/[\s_]+/);
  for (let i = 0; i < words.length; i++) {
    if (words[i][0]) {
      words[i] = words[i][0].toUpperCase() + words[i].slice(1);
    }
  }
  return words.join(" ");
}

// Get seasons data
const { seasonsCount, firstSeason, listOfSeasons } = getSeasonsCount();
const listJugadorsImages = await getJugadorsImagesListNames();

// Function to fetch seasons data
async function getSeasonsData(firstSeason: number, seasonsCount: number) {
  const seasonsData = [];
  let currentSeason = firstSeason;
  for (let i = 0; i < seasonsCount; i++) {
    const season = {
      years: `${currentSeason}/${currentSeason + 1}`,
      yearsLong: `19${currentSeason}-${currentSeason + 1}`,
      stats: getSeasonStats(`19${currentSeason}-${currentSeason + 1}`),
      relat: {
        content: await getSeasonRelat(`19${currentSeason}-${currentSeason + 1}`),
        props: SEASONS_LAYOUT[i % 2].relatProps,
      },
      social: await getSeasonSocial(`19${currentSeason}-${currentSeason + 1}`),
      socialExtra: undefined,
      images: {
        firstLayout: SEASONS_LAYOUT[i % 2].firstLayout,
        secondLayout: SEASONS_LAYOUT[i % 2].secondLayout,
        img_1: {
          url: `/imatges/layout/19${currentSeason}-${currentSeason + 1}_foto1.webp`,
          alt: ` Imatge d'arxiu de la temporada 19${currentSeason}-${currentSeason + 1}`,
          layout: SEASONS_LAYOUT[i % 2].img1,
        },
        img_2: {
          url: `/imatges/layout/19${currentSeason}-${currentSeason + 1}_foto2.webp`,
          alt: ` Imatge d'arxiu de la temporada 19${currentSeason}-${currentSeason + 1}`,
          layout: SEASONS_LAYOUT[i % 2].img2,
        },
      },
    };
    if (i === seasonsCount - 1) {
      season.socialExtra = await getSeasonSocial(`19${currentSeason + 1}-${currentSeason + 2}`);
    }
    seasonsData.push(season);
    currentSeason++;
  }
  return seasonsData;
}

// Fetch seasons data
const seasons = await getSeasonsData(firstSeason, seasonsCount);

// Process jugadors data
seasons.forEach((season) => {
  if (season.stats.jugadors) {
    (season.stats.jugadors as any[]).forEach((jugador: any) => {
      jugador.jugador = capitalizeWords(jugador.jugador);
      const words = jugador.jugador.split(" ");
      const nameToCheck = words.length
        ? words[1]
          ? `${season.yearsLong} ${words[0]} ${(words[1] !== "M.ª" ? words[1] : "M.").replace(/ñ/g, "n")}`
          : `${season.yearsLong} ${words[0]}`
        : "";
      const jugadorImage = listJugadorsImages.find((image) =>
        image.includes(removeAccents(nameToCheck))
      );
      jugador.image = jugadorImage;
    });
  }
});

// Process entrenadors data
seasons.forEach((season) => {
  const entries = Object.entries(season.stats.entrenadors![0]);
  entries.forEach((entry, i) => {
    let [position, name] = entry;
    name = capitalizeWords(name as string);
    position = capitalizeWords(position);
    const words = (name as string).split(" ");
    const nameToCheck = words.length
      ? words[1]
        ? `${season.yearsLong} ${words[0]} ${(words[1] !== "M.ª" ? words[1] : "M.").replace(/ñ/g, "n")}`
        : `${season.yearsLong} ${words[0]}`
      : "";
    const entrenadorImage = listJugadorsImages.find((image) =>
      image.includes(removeAccents(nameToCheck))
    );
    //@ts-ignore
    season.stats.entrenadors[i] = { position, name, image: entrenadorImage };
  });
});
---

<BaseLayout>
  <Hero />
  <Seasons client:only {seasons} totalSeasons={seasonsCount} {listOfSeasons} />
</BaseLayout>