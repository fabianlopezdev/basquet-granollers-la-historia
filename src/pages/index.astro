---
//Import layouts
import BaseLayout from "../layouts/BaseLayout.astro";

//Import components
import Hero from "@components/Hero.astro";
import Seasons from "@components/seasons/Seasons.svelte";

import { getSeasonStats } from "@data/stats";
import { getSeasonRelat } from "@data/relats";
import { getSeasonsCount } from "@data/seasonsCount";
import { getSeasonSocial } from "@data/social";
import { SEASONS_LAYOUT } from "@data/globalConstants";
import { getJugadorsImagesListNames } from "@data/images.js";
import {removeAccents} from "../utils/helperFunctions";

function capitalizeWords(str: string) {
  // Convert the entire string to lowercase first
  const lowerStr = str.toLowerCase();

  // Split the string into words based on spaces and underscores
  const words = lowerStr.split(/[\s_]+/);

  // Capitalize the first letter of each word
  for (let i = 0; i < words.length; i++) {
    if (words[i][0]) {
      words[i] = words[i][0].toUpperCase() + words[i].slice(1);
    }
  }

  // Join the words back into a string with spaces, replacing underscores with spaces
  return words.join(" ");
}



const { seasonsCount, firstSeason, listOfSeasons } = getSeasonsCount();


const listJugadorsImages = await getJugadorsImagesListNames();



async function getSeasonsData(firstSeason: number, seasonsCount: number) {
  const seasonsData = [];
  let currentSeason = firstSeason;
  for (let i = 0; i < seasonsCount; i++) {
    const season = {
      years: `${currentSeason}/${currentSeason + 1}`,
      yearsLong: `19${currentSeason}-${currentSeason + 1}`,
      stats: getSeasonStats(`19${currentSeason}-${currentSeason + 1}`),
      relat: {
        content: await getSeasonRelat(
          `19${currentSeason}-${currentSeason + 1}`,
        ),
        props: SEASONS_LAYOUT[i % 2].relatProps,
      },
      social: await getSeasonSocial(`19${currentSeason}-${currentSeason + 1}`),
      images: {
        firstLayout: SEASONS_LAYOUT[i % 2].firstLayout,
        secondLayout: SEASONS_LAYOUT[i % 2].secondLayout,
        img_1: {url: `/imatges/layout/19${currentSeason}-${currentSeason + 1}_foto1.webp`, alt: ` Imatge d'arxiu de la temporada 19${currentSeason}-${currentSeason + 1}`, layout: SEASONS_LAYOUT[i % 2].img1},
        img_2: {url: `/imatges/layout/19${currentSeason}-${currentSeason + 1}_foto2.webp`, alt: ` Imatge d'arxiu de la temporada 19${currentSeason}-${currentSeason + 1}`, layout: SEASONS_LAYOUT[i % 2].img2},
      }
    };
    // const season = new Season(`19${currentSeason}-${currentSeason + 1}`);
    seasonsData.push(season);
    currentSeason++;
  }

  return seasonsData;
}

const seasons = await getSeasonsData(firstSeason, seasonsCount);


seasons.forEach((season) => {
  if (season.stats.jugadors) {
    (season.stats.jugadors as any[]).forEach((jugador: any) => {
      jugador.jugador = capitalizeWords(jugador.jugador);
      const words = jugador.jugador.split(" ");
      const nameToCheck = words.length ? (words[1] ? `${season.yearsLong} ${words[0]} ${(words[1] !== 'M.ª' ? words[1] : 'M.').replace(/ñ/g, 'n')}` : `${season.yearsLong} ${words[0]}`) : "";
      const jugadorImage = listJugadorsImages.find((image) => image.includes(removeAccents(nameToCheck)));
      jugador.image = jugadorImage; // Correctly assign the found image to the jugador.image property.
    });
  }});
 
seasons.forEach((season) => {
  const entries = Object.entries(season.stats.entrenadors![0]);
  
  entries.forEach((entry, i) => {
    let [position, name] = entry;
    name = capitalizeWords(name as string);
    position = capitalizeWords(position);
    const words = (name as string).split(" ");
    const nameToCheck = words.length ? (words[1] ? `${season.yearsLong} ${words[0]} ${(words[1] !== 'M.ª' ? words[1] : 'M.').replace(/ñ/g, 'n')}` : `${season.yearsLong} ${words[0]}`) : "";
    const entrenadorImage = listJugadorsImages.find((image) => image.includes(removeAccents(nameToCheck)));
    season.stats.entrenadors[i] = {position, name, image: entrenadorImage};
 
  })
});
// Ensure the property is initialized with an array if undefined




---

<BaseLayout >
  <Hero />
  <Seasons client:only {seasons} totalSeasons={seasonsCount} {listOfSeasons} />
</BaseLayout>

